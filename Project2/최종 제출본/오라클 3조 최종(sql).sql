SELECT USER
FROM DUAL;

--■■■ SQL문 ■■■

--------------------------------------------------------------------------------
--○ 데이터 입력 전에 초기화하기
/*
DELETE
FROM ADMIN;
DELETE
FROM STU_DROP;
DELETE
FROM DROP_RES;
DELETE
FROM SCORE;
DELETE
FROM SUB_LIST;
DELETE
FROM SUBJECT;
DELETE
FROM BOOK;
DELETE
FROM REGISTRATION;
DELETE
FROM CURRICULUM;
DELETE
FROM ROOM;
DELETE
FROM STUDENT;
DELETE
FROM PROFESSOR;
*/

--------------------------------------------------------------------------------
--○ 테이블 생성 및 데이터 입력
-- 관리자 테이블
CREATE TABLE ADMIN
( AD_ID VARCHAR2(10)
, AD_PW VARCHAR2(15)    CONSTRAINT ADMIN_PW_NN NOT NULL

, CONSTRAINT ADMIN_ID_PK PRIMARY KEY(AD_ID)
);

SELECT *
FROM ADMIN;


-- 교수 테이블
CREATE TABLE PROFESSOR
( PRO_ID        VARCHAR2(10)
, PRO_PW        VARCHAR2(15)    
, PRO_NAME      VARCHAR2(10)    CONSTRAINT PROFESSOR_NAME_NN NOT NULL
, PRO_FIRSTSSN  CHAR(6)         CONSTRAINT PROFESSOR_FIRSTSSN_NN NOT NULL
, PRO_LASTSSN   CHAR(7)         CONSTRAINT PROFESSOR_LASTSSN_NN NOT NULL

, CONSTRAINT PROFESSOR_ID_PK PRIMARY KEY(PRO_ID)
, CONSTRAINT PROFESSOR_SSN_UK UNIQUE(PRO_FIRSTSSN, PRO_LASTSSN)
);

INSERT INTO PROFESSOR(PRO_ID, PRO_NAME, PRO_FIRSTSSN, PRO_LASTSSN)
VALUES('KHJ123', '김호진', '870808', '1234567');
INSERT INTO PROFESSOR(PRO_ID, PRO_NAME, PRO_FIRSTSSN, PRO_LASTSSN)
VALUES('JYJ234', '장유진', '930505', '2234567');
INSERT INTO PROFESSOR(PRO_ID, PRO_NAME, PRO_FIRSTSSN, PRO_LASTSSN)
VALUES('HGD456', '홍길동', '780503', '1234567');

SELECT *
FROM PROFESSOR;

-- 교수 제약조건 추가
ALTER TABLE PROFESSOR
ADD (CONSTRAINT PRO_SSN_CK CHECK(SUBSTR(PRO_LASTSSN,1,1) IN ('1', '2', '3', '4', '5', '6'))
        , CONSTRAINT PRO_FIRST_CK CHECK(LENGTH(PRO_FIRSTSSN) = 6)
        , CONSTRAINT PRO_LAST_CK CHECK(LENGTH(PRO_LASTSSN) = 7) );
--==>>Table PROFESSOR이(가) 변경되었습니다.



-- 학생 테이블
CREATE TABLE STUDENT
( STU_ID            VARCHAR2(10)
, STU_PW            VARCHAR2(15)
, STU_NAME          VARCHAR2(10)    CONSTRAINT STUDENT_NAME_NN NOT NULL
, STU_FIRSTSSN      CHAR(6)         CONSTRAINT STUDENT_FIRSTSSN_NN NOT NULL
, STU_LASTSSN       CHAR(7)         CONSTRAINT STUDENT_LASTSSN_NN NOT NULL

, CONSTRAINT STUDENT_ID_PK PRIMARY KEY (STU_ID)
, CONSTRAINT STUDENT_SSN_UK UNIQUE(STU_FIRSTSSN, STU_LASTSSN)
);

INSERT INTO STUDENT(STU_ID, STU_NAME, STU_FIRSTSSN, STU_LASTSSN)
VALUES('SHD123', '송해덕', '960203', '1234567');
INSERT INTO STUDENT(STU_ID, STU_NAME, STU_FIRSTSSN, STU_LASTSSN)
VALUES('JJH234', '장진하', '970825', '2234567');
INSERT INTO STUDENT(STU_ID, STU_NAME, STU_FIRSTSSN, STU_LASTSSN)
VALUES('KSY345', '김소연', '890503', '2582045');
INSERT INTO STUDENT(STU_ID, STU_NAME, STU_FIRSTSSN, STU_LASTSSN)
VALUES('JGY456', '정가연', '890312', '2812354');
INSERT INTO STUDENT(STU_ID, STU_NAME, STU_FIRSTSSN, STU_LASTSSN)
VALUES('LJY567', '이지영', '901201', '2354712');
INSERT INTO STUDENT(STU_ID, STU_NAME, STU_FIRSTSSN, STU_LASTSSN)
VALUES('LDY678', '이다영', '910530', '2385841');

SELECT *
FROM STUDENT;

-- 학생 제약조건 추가
ALTER TABLE STUDENT
ADD (CONSTRAINT STUDENT_SSN_CK CHECK(SUBSTR(STU_LASTSSN,1,1) IN ('1', '2', '3', '4', '5', '6'))
        , CONSTRAINT STUDENT_FIRST_CK CHECK(LENGTH(STU_FIRSTSSN) = 6)
        , CONSTRAINT STUDENT_LAST_CK CHECK(LENGTH(STU_LASTSSN) = 7) );
--==>> Table STUDENT이(가) 변경되었습니다.


-- 중도탈락사유 테이블
CREATE TABLE DROP_RES
( REASON_NO VARCHAR2(7)
, REASON    VARCHAR2(100) CONSTRAINT DRES_REASON_NN NOT NULL

, CONSTRAINT DRES_REASON_NO_PK  PRIMARY KEY(REASON_NO)
, CONSTRAINT DRES_REASON_UK     UNIQUE(REASON)
);

INSERT INTO DROP_RES(REASON_NO, REASON)
VALUES('DROP-1', '개인사정');
INSERT INTO DROP_RES(REASON_NO, REASON)
VALUES('DROP-2', '질병');
INSERT INTO DROP_RES(REASON_NO, REASON)
VALUES('DROP-3', '점수미달');
INSERT INTO DROP_RES(REASON_NO, REASON)
VALUES('DROP-4', '출석률미달');

SELECT *
FROM DROP_RES;

-- 강의실 테이블
CREATE TABLE ROOM
( ROOM_NO           VARCHAR2(5)
, ROOM_CAPACITY     VARCHAR2(200)
, CONSTRAINT ROOM_NO_PK PRIMARY KEY(ROOM_NO)
);

INSERT INTO ROOM(ROOM_NO, ROOM_CAPACITY)
VALUES('A101', '자연관 1층 20석규모');
INSERT INTO ROOM(ROOM_NO, ROOM_CAPACITY)
VALUES('B201', '공학관 2층 40석규모');
INSERT INTO ROOM(ROOM_NO, ROOM_CAPACITY)
VALUES('C301', '인문관 3층 30석규모');

SELECT *
FROM ROOM;

-- 교재 테이블
CREATE TABLE BOOK
( BOOK_NO       VARCHAR2(7)
, BOOK_NAME     VARCHAR2(100)   CONSTRAINT BOOK_BNAME_NN NOT NULL
, AUTHOR_NAME   VARCHAR2(10)    CONSTRAINT BOOK_ANAME_NN NOT NULL
, PUBLISHER     VARCHAR2(100)   CONSTRAINT BOOK_PUBLISHER_NN NOT NULL

, CONSTRAINT BOOK_NO_PK PRIMARY KEY(BOOK_NO)
);

INSERT INTO BOOK(BOOK_NO, BOOK_NAME, AUTHOR_NAME, PUBLISHER)
VALUES('BOOK-1', '오라클SQL', '서진수', '생능출판');
INSERT INTO BOOK(BOOK_NO, BOOK_NAME, AUTHOR_NAME, PUBLISHER)
VALUES('BOOK-2', '자바의 정석', '남궁성', '도우출판');
INSERT INTO BOOK(BOOK_NO, BOOK_NAME, AUTHOR_NAME, PUBLISHER)
VALUES('BOOK-3', 'HTML5+CSS3', '고경희', '이지스퍼블리싱');
INSERT INTO BOOK(BOOK_NO, BOOK_NAME, AUTHOR_NAME, PUBLISHER)
VALUES('BOOK-4', '스프링5 마스터', '송주경', '에이콘');

SELECT *
FROM BOOK;

-- 과정 테이블
CREATE TABLE CURRICULUM
( CUR_NO            VARCHAR2(7)
, CUR_NAME          VARCHAR2(100)   CONSTRAINT CURRICULUM_NAME_NN NOT NULL
, CUR_STARTDATE     DATE
, CUR_ENDDATE       DATE
, ROOM_NO           VARCHAR2(5)

, CONSTRAINT CURRICULUM_NO_PK PRIMARY KEY(CUR_NO)
, CONSTRAINT CURRICULUM_STARTDATE_CK CHECK(CUR_STARTDATE < CUR_ENDDATE)
, CONSTRAINT CURRICULUM_ROOM_NO_FK FOREIGN KEY(ROOM_NO)
                        REFERENCES ROOM(ROOM_NO)
);

ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

INSERT INTO CURRICULUM(CUR_NO, CUR_NAME, CUR_STARTDATE, CUR_ENDDATE, ROOM_NO)
VALUES('CUR-1', '데이터 분석기법을 활용한 개발자양성과정 (A)'
    , TO_DATE('2021-01-01', 'YYYY-MM-DD'), TO_DATE('2021-06-30', 'YYYY-MM-DD')
    , 'A101'); -- 강의 종료 과정
INSERT INTO CURRICULUM(CUR_NO, CUR_NAME, CUR_STARTDATE, CUR_ENDDATE, ROOM_NO)
VALUES('CUR-2', '데이터 분석기법을 활용한 개발자양성과정 (B)'
    , TO_DATE('2021-07-01', 'YYYY-MM-DD'), TO_DATE('2021-12-31', 'YYYY-MM-DD')
    , 'B201'); -- 강의 중 과정
INSERT INTO CURRICULUM(CUR_NO, CUR_NAME, CUR_STARTDATE, CUR_ENDDATE, ROOM_NO)
VALUES('CUR-3', '데이터 분석기법을 활용한 개발자양성과정 (C)'
    , TO_DATE('2022-01-01', 'YYYY-MM-DD'), TO_DATE('2022-06-30', 'YYYY-MM-DD')
    , 'C301'); -- 강의 예정 과정

SELECT *
FROM CURRICULUM;

-- 과목 테이블
CREATE TABLE SUBJECT
( SUB_NO        VARCHAR2(7)
, SUB_NAME      VARCHAR2(100)   CONSTRAINT SUBJECT_NAME_NN NOT NULL
, BOOK_NO       VARCHAR2(7)

, CONSTRAINT SUBJECT_NO_PK PRIMARY KEY (SUB_NO)
, CONSTRAINT SUBJECT_BOOK_NO_FK FOREIGN KEY (BOOK_NO)
            REFERENCES BOOK(BOOK_NO)
, CONSTRAINT SUBJECT_NAME_UK UNIQUE (SUB_NAME)
);

INSERT INTO SUBJECT(SUB_NO, SUB_NAME, BOOK_NO)
VALUES('SUB-1', '자바', 'BOOK-2');
INSERT INTO SUBJECT(SUB_NO, SUB_NAME, BOOK_NO)
VALUES('SUB-2', '오라클', 'BOOK-1');
INSERT INTO SUBJECT(SUB_NO, SUB_NAME, BOOK_NO)
VALUES('SUB-3', 'HTML', 'BOOK-3');
INSERT INTO SUBJECT(SUB_NO, SUB_NAME, BOOK_NO)
VALUES('SUB-4', '자바스프링', 'BOOK-4');

SELECT *
FROM SUBJECT;
SELECT *
FROM SUB_LIST;
SELECT *
FROM CURRICULUM;

-- 과목개설 테이블
CREATE TABLE SUB_LIST
( LIST_NO       VARCHAR2(7)
, CUR_NO        VARCHAR2(7) CONSTRAINT SUBLI_CUR_NO_NN NOT NULL
, SUB_NO        VARCHAR2(7) CONSTRAINT SUBLI_SUB_NO_NN NOT NULL
, SUB_STARTDATE DATE
, SUB_ENDDATE   DATE
, PRO_ID        VARCHAR2(10)
, ATTEND_DIV    NUMBER(3)   DEFAULT 0
, PRAC_DIV      NUMBER(3)   DEFAULT 0
, WRITE_DIV     NUMBER(3)   DEFAULT 0

, CONSTRAINT SUBLI_LIST_NO_PK PRIMARY KEY(LIST_NO)

, CONSTRAINT SUBLI_CUR_NO_FK FOREIGN KEY(CUR_NO)
                             REFERENCES CURRICULUM(CUR_NO)
, CONSTRAINT SUBLI_SUB_NO_FK FOREIGN KEY(SUB_NO)
                             REFERENCES SUBJECT(SUB_NO)
, CONSTRAINT SUBLI_PRO_ID_FK FOREIGN KEY(PRO_ID)
                             REFERENCES PROFESSOR(PRO_ID)

, CONSTRAINT SUBLI_SUB_STARTDATE_CK CHECK(SUB_STARTDATE < SUB_ENDDATE)
, CONSTRAINT SUBLI_DIV_CK CHECK(ATTEND_DIV + PRAC_DIV + WRITE_DIV = 100)
, CONSTRAINT SUBLI_ATTEND_DIV_CK CHECK(ATTEND_DIV BETWEEN 0 AND 100)
, CONSTRAINT SUBLI_PRAC_DIV_CK  CHECK(PRAC_DIV BETWEEN 0 AND 100)
, CONSTRAINT SUBLI_WRITE_DIV_CK CHECK(WRITE_DIV BETWEEN 0 AND 100)
);

INSERT INTO SUB_LIST(LIST_NO, CUR_NO, SUB_NO, SUB_STARTDATE,SUB_ENDDATE, PRO_ID, ATTEND_DIV, PRAC_DIV, WRITE_DIV)
VALUES('LI-1', 'CUR-1', 'SUB-1', '2021-01-01', '2021-01-31', 'KHJ123', 20, 40, 40);
INSERT INTO SUB_LIST(LIST_NO, CUR_NO, SUB_NO, SUB_STARTDATE,SUB_ENDDATE, PRO_ID, ATTEND_DIV, PRAC_DIV, WRITE_DIV)
VALUES('LI-2', 'CUR-1', 'SUB-2', '2021-02-01', '2021-02-28', 'KHJ123', 20, 40, 40);
INSERT INTO SUB_LIST(LIST_NO, CUR_NO, SUB_NO, SUB_STARTDATE,SUB_ENDDATE, PRO_ID, ATTEND_DIV, PRAC_DIV, WRITE_DIV)
VALUES('LI-3', 'CUR-1', 'SUB-3', '2021-03-01', '2021-06-30', 'KHJ123', 20, 40, 40);
INSERT INTO SUB_LIST(LIST_NO, CUR_NO, SUB_NO, SUB_STARTDATE,SUB_ENDDATE, PRO_ID, ATTEND_DIV, PRAC_DIV, WRITE_DIV)
VALUES('LI-4', 'CUR-2', 'SUB-1', '2021-07-01', '2021-07-31', 'JYJ234', 25, 35, 40);
INSERT INTO SUB_LIST(LIST_NO, CUR_NO, SUB_NO, SUB_STARTDATE,SUB_ENDDATE, PRO_ID, ATTEND_DIV, PRAC_DIV, WRITE_DIV)
VALUES('LI-5', 'CUR-2', 'SUB-3', '2021-08-01', '2021-08-31', 'JYJ234', 25, 35, 40);
INSERT INTO SUB_LIST(LIST_NO, CUR_NO, SUB_NO, SUB_STARTDATE,SUB_ENDDATE, PRO_ID, ATTEND_DIV, PRAC_DIV, WRITE_DIV)
VALUES('LI-6', 'CUR-2', 'SUB-4', '2021-09-01', '2021-12-31', 'JYJ234', 25, 35, 40);
INSERT INTO SUB_LIST(LIST_NO, CUR_NO, SUB_NO, SUB_STARTDATE,SUB_ENDDATE, PRO_ID, ATTEND_DIV, PRAC_DIV, WRITE_DIV)
VALUES('LI-7', 'CUR-3', 'SUB-2', '2022-01-01', '2022-01-31', 'HGD456', 10, 30, 60);
INSERT INTO SUB_LIST(LIST_NO, CUR_NO, SUB_NO, SUB_STARTDATE,SUB_ENDDATE, PRO_ID, ATTEND_DIV, PRAC_DIV, WRITE_DIV)
VALUES('LI-8', 'CUR-3', 'SUB-3', '2022-02-01', '2022-02-28', 'HGD456', 10, 30, 60);
INSERT INTO SUB_LIST(LIST_NO, CUR_NO, SUB_NO, SUB_STARTDATE,SUB_ENDDATE, PRO_ID, ATTEND_DIV, PRAC_DIV, WRITE_DIV)
VALUES('LI-9', 'CUR-3', 'SUB-4', '2022-03-01', '2022-06-30', 'HGD456', 10, 30, 60);

SELECT *
FROM SUB_LIST;

-- 수강신청 테이블
CREATE TABLE REGISTRATION
( REG_NO    VARCHAR2(7)
, STU_ID    VARCHAR2(10)    CONSTRAINT REGISTRATION_STU_ID_NN NOT NULL
, CUR_NO    VARCHAR2(7)     CONSTRAINT REGISTRATION_CUR_NO_NN NOT NULL
, REG_DATE  DATE DEFAULT SYSDATE

, CONSTRAINT REGISTRATION_REG_NO_PK PRIMARY KEY(REG_NO)
, CONSTRAINT REGISTRATION_STU_ID_FK FOREIGN KEY(STU_ID)
                            REFERENCES STUDENT(STU_ID)
, CONSTRAINT REGISTRATION_CUR_NO_FK FOREIGN KEY(CUR_NO)
                            REFERENCES CURRICULUM(CUR_NO)
);

INSERT INTO REGISTRATION(REG_NO, STU_ID, CUR_NO, REG_DATE)
VALUES('REG-1', 'SHD123', 'CUR-1', '2020-12-15');
INSERT INTO REGISTRATION(REG_NO, STU_ID, CUR_NO, REG_DATE)
VALUES('REG-2', 'JJH234', 'CUR-1', '2020-12-17');
INSERT INTO REGISTRATION(REG_NO, STU_ID, CUR_NO, REG_DATE)
VALUES('REG-3', 'KSY345', 'CUR-2', '2021-05-19');
INSERT INTO REGISTRATION(REG_NO, STU_ID, CUR_NO, REG_DATE)
VALUES('REG-4', 'JGY456', 'CUR-2', '2021-05-20');
INSERT INTO REGISTRATION(REG_NO, STU_ID, CUR_NO, REG_DATE)
VALUES('REG-5', 'LJY567', 'CUR-3', '2021-09-20');
INSERT INTO REGISTRATION(REG_NO, STU_ID, CUR_NO)
VALUES('REG-6', 'LDY678', 'CUR-3'); -- 신청일 SYSDATE

SELECT *
FROM REGISTRATION;

-- 성적 테이블
CREATE TABLE SCORE
( SCORE_NO      VARCHAR2(7)
, REG_NO        VARCHAR2(7) CONSTRAINT SCORE_REG_NO_NN NOT NULL
, LIST_NO       VARCHAR2(7) CONSTRAINT SCORE_LIST_NO_NN NOT NULL
, ATTEND_SCORE  NUMBER(3) DEFAULT 0
, PRAC_SCORE    NUMBER(3) DEFAULT 0
, WRITE_SCORE   NUMBER(3) DEFAULT 0

, CONSTRAINT SCORE_NO_PK PRIMARY KEY(SCORE_NO)
, CONSTRAINT SCORE_REG_NO_FK FOREIGN KEY(REG_NO)
             REFERENCES REGISTRATION(REG_NO)
, CONSTRAINT SCORE_LIST_NO_FK FOREIGN KEY(LIST_NO)
             REFERENCES SUB_LIST(LIST_NO)
, CONSTRAINT SCORE_ATTEND_CK CHECK (ATTEND_SCORE BETWEEN 0 AND 100)
, CONSTRAINT SCORE_PRAC_CK CHECK (PRAC_SCORE BETWEEN 0 AND 100)
, CONSTRAINT SCORE_WRITE_CK CHECK (WRITE_SCORE BETWEEN 0 AND 100)
);

INSERT INTO SCORE(SCORE_NO, REG_NO, LIST_NO, ATTEND_SCORE, PRAC_SCORE, WRITE_SCORE)
VALUES('SCO-1', 'REG-1', 'LI-1', 80, 80, 85);
INSERT INTO SCORE(SCORE_NO, REG_NO, LIST_NO, ATTEND_SCORE, PRAC_SCORE, WRITE_SCORE)
VALUES('SCO-2', 'REG-1', 'LI-2', 75, 80, 85);
INSERT INTO SCORE(SCORE_NO, REG_NO, LIST_NO, ATTEND_SCORE, PRAC_SCORE, WRITE_SCORE)
VALUES('SCO-3', 'REG-1', 'LI-3', 100, 80, 75);
INSERT INTO SCORE(SCORE_NO, REG_NO, LIST_NO, ATTEND_SCORE, PRAC_SCORE, WRITE_SCORE)
VALUES('SCO-4', 'REG-2', 'LI-1', 85, 70, 85);
INSERT INTO SCORE(SCORE_NO, REG_NO, LIST_NO, ATTEND_SCORE, PRAC_SCORE, WRITE_SCORE)
VALUES('SCO-5', 'REG-2', 'LI-2', 0, 80, 85);
-- SCOR-6은 중도탈락

-- 여기까지는 끝난 과정1(REG-1)의 점수 모두 표시
INSERT INTO SCORE(SCORE_NO, REG_NO, LIST_NO, ATTEND_SCORE, PRAC_SCORE, WRITE_SCORE)
VALUES('SCO-7', 'REG-3', 'LI-4', 0, 0, 0);
INSERT INTO SCORE(SCORE_NO, REG_NO, LIST_NO, ATTEND_SCORE, PRAC_SCORE, WRITE_SCORE)
VALUES('SCO-8', 'REG-4', 'LI-4', 100, 100, 100);
INSERT INTO SCORE(SCORE_NO, REG_NO, LIST_NO, ATTEND_SCORE, PRAC_SCORE, WRITE_SCORE)
VALUES('SCO-9', 'REG-3', 'LI-5', 45, 86, 77);
INSERT INTO SCORE(SCORE_NO, REG_NO, LIST_NO, ATTEND_SCORE, PRAC_SCORE, WRITE_SCORE)
VALUES('SCO-10', 'REG-4', 'LI-5', 89, 65, 99);
-- 여기까지는 진행중인 과정2(REG-2)의 두개의 과목 점수만 표시


/*
-- 위의 데이터 볼 때 참조 할 것
INSERT INTO SUB_LIST(LIST_NO, CUR_NO, SUB_NO, SUB_STARTDATE,SUB_ENDDATE, PRO_ID, ATTEND_DIV, PRAC_DIV, WRITE_DIV)
VALUES('LI-1', 'CUR-1', 'SUB-1', '2021-01-01', '2021-01-31', 'KHJ123', 20, 40, 40);
INSERT INTO SUB_LIST(LIST_NO, CUR_NO, SUB_NO, SUB_STARTDATE,SUB_ENDDATE, PRO_ID, ATTEND_DIV, PRAC_DIV, WRITE_DIV)
VALUES('LI-2', 'CUR-1', 'SUB-2', '2021-02-01', '2021-02-28', 'KHJ123', 20, 40, 40);
INSERT INTO SUB_LIST(LIST_NO, CUR_NO, SUB_NO, SUB_STARTDATE,SUB_ENDDATE, PRO_ID, ATTEND_DIV, PRAC_DIV, WRITE_DIV)
VALUES('LI-3', 'CUR-1', 'SUB-3', '2021-03-01', '2021-06-30', 'KHJ123', 20, 40, 40);
INSERT INTO SUB_LIST(LIST_NO, CUR_NO, SUB_NO, SUB_STARTDATE,SUB_ENDDATE, PRO_ID, ATTEND_DIV, PRAC_DIV, WRITE_DIV)
VALUES('LI-4', 'CUR-2', 'SUB-1', '2021-07-01', '2021-07-31', 'JYJ234', 25, 35, 40);
INSERT INTO SUB_LIST(LIST_NO, CUR_NO, SUB_NO, SUB_STARTDATE,SUB_ENDDATE, PRO_ID, ATTEND_DIV, PRAC_DIV, WRITE_DIV)
VALUES('LI-5', 'CUR-2', 'SUB-3', '2021-08-01', '2021-08-31', 'JYJ234', 25, 35, 40);
INSERT INTO SUB_LIST(LIST_NO, CUR_NO, SUB_NO, SUB_STARTDATE,SUB_ENDDATE, PRO_ID, ATTEND_DIV, PRAC_DIV, WRITE_DIV)
VALUES('LI-6', 'CUR-2', 'SUB-4', '2021-09-01', '2021-12-31', 'JYJ234', 25, 35, 40);
INSERT INTO SUB_LIST(LIST_NO, CUR_NO, SUB_NO, SUB_STARTDATE,SUB_ENDDATE, PRO_ID, ATTEND_DIV, PRAC_DIV, WRITE_DIV)
VALUES('LI-7', 'CUR-3', 'SUB-2', '2022-01-01', '2022-01-31', 'HGD456', 10, 30, 60);
INSERT INTO SUB_LIST(LIST_NO, CUR_NO, SUB_NO, SUB_STARTDATE,SUB_ENDDATE, PRO_ID, ATTEND_DIV, PRAC_DIV, WRITE_DIV)
VALUES('LI-8', 'CUR-3', 'SUB-3', '2022-02-01', '2022-02-28', 'HGD456', 10, 30, 60);
INSERT INTO SUB_LIST(LIST_NO, CUR_NO, SUB_NO, SUB_STARTDATE,SUB_ENDDATE, PRO_ID, ATTEND_DIV, PRAC_DIV, WRITE_DIV)
VALUES('LI-9', 'CUR-3', 'SUB-4', '2022-03-01', '2022-06-30', 'HGD456', 10, 30, 60);

INSERT INTO REGISTRATION(REG_NO, STU_ID, CUR_NO, REG_DATE)
VALUES('REG-1', 'SHD123', 'CUR-1', '2020-12-15');
INSERT INTO REGISTRATION(REG_NO, STU_ID, CUR_NO, REG_DATE)
VALUES('REG-2', 'JJH234', 'CUR-1', '2020-12-17');
INSERT INTO REGISTRATION(REG_NO, STU_ID, CUR_NO, REG_DATE)
VALUES('REG-3', 'KSY345', 'CUR-2', '2021-05-19');
INSERT INTO REGISTRATION(REG_NO, STU_ID, CUR_NO, REG_DATE)
VALUES('REG-4', 'JGY456', 'CUR-2', '2021-05-20');
*/

SELECT *
FROM SCORE;

-- 중도탈락학생 테이블
CREATE TABLE STU_DROP
( DROP_NO       VARCHAR2(7)
, REG_NO        VARCHAR2(7) CONSTRAINT STUDROP_REG_NO_NN NOT NULL
, STU_DROPDATE  DATE        DEFAULT SYSDATE
, REASON_NO     VARCHAR2(7)
, CONSTRAINT STUDROP_NO_PK    PRIMARY KEY(DROP_NO)
, CONSTRAINT STUDROP_REG_NO_FK     FOREIGN KEY(REG_NO)
             REFERENCES REGISTRATION(REG_NO)
, CONSTRAINT STUDROP_REASON_NO_FK  FOREIGN KEY(REASON_NO)
             REFERENCES DROP_RES(REASON_NO)
);

INSERT INTO STU_DROP(DROP_NO, REG_NO, STU_DROPDATE, REASON_NO)
VALUES('DR-1', 'REG-2', '2021-04-03', 'DROP-1');

SELECT *
FROM STU_DROP;


--------------------------------------------------------------------------------
--○ 시퀀스 생성(9개)

/* ※ 시퀀스 제거
DROP SEQUENCE SEQ_CURRICULUM;
DROP SEQUENCE SEQ_DROPRES;
*/

-- 과정 시퀀스 생성
CREATE SEQUENCE SEQ_CURRICULUM   -- 시퀀스 생성 기본 구문
START WITH 1                -- 시작값
INCREMENT BY 1              -- 증가값
NOMAXVALUE                  -- 최대값 제한 안둠
NOCACHE;                    -- 캐시 사용 안함(없음)

-- 중도탈락사유 시퀀스 생성
CREATE SEQUENCE SEQ_DROPRES   -- 시퀀스 생성 기본 구문
START WITH 1                -- 시작값
INCREMENT BY 1              -- 증가값
NOMAXVALUE                  -- 최대값 제한 안둠
NOCACHE;                    -- 캐시 사용 안함(없음)

-- 과목번호 시퀀스 생성
CREATE SEQUENCE SEQ_SUBJECT
START WITH 1                
INCREMENT BY 1             
NOMAXVALUE                  
NOCACHE;  

-- 교재번호 시퀀스 생성
CREATE SEQUENCE SEQ_BOOK
START WITH 1                
INCREMENT BY 1             
NOMAXVALUE                  
NOCACHE;  

-- 과목개설 테이블 시퀀스 생성 구문
CREATE SEQUENCE SEQ_SUB_LIST   -- 시퀀스 생성 기본 구문
START WITH 1                   -- 시작값
INCREMENT BY 1                 -- 증가값
NOMAXVALUE                     -- 최대값 제한 안둠
NOCACHE; 
--==>> Sequence SEQ_SUB_LIST이(가) 생성되었습니다.

-- 중도탈락사유 테이블 시퀀스 생성 구문
CREATE SEQUENCE SEQ_DROP_RES   -- 시퀀스 생성 기본 구문
START WITH 1                   -- 시작값
INCREMENT BY 1                 -- 증가값
NOMAXVALUE                     -- 최대값 제한 안둠
NOCACHE; 
--==>> Sequence SEQ_DROP_RES이(가) 생성되었습니다.

--수강신청
CREATE SEQUENCE SEQ_REGISTRATION
START WITH 1                
INCREMENT BY 1             
NOMAXVALUE                  
NOCACHE;

--중도탈락학생
CREATE SEQUENCE SEQ_STUDROP
START WITH 1                
INCREMENT BY 1             
NOMAXVALUE                  
NOCACHE;  

-- 성적 시퀀스
CREATE SEQUENCE SEQ_SCORE
START WITH 1                   
INCREMENT BY 1                 
NOMAXVALUE                   
NOCACHE; 
--==> Sequence SEQ_SCORE이(가) 생성되었습니다.

--------------------------------------------------------------------------------
--○ 뷰 생성

-- 1. 교수자 정보 출력 VIEW
CREATE OR REPLACE VIEW VIEW_PROFESSOR
AS
SELECT P.PRO_NAME "교수자명", S.SUB_NAME "배정된과목명", SL.SUB_STARTDATE "과목시작일"
    , SL.SUB_ENDDATE "과목종료일", B.BOOK_NAME "교재명", R.ROOM_NO "강의실명"
    , CASE WHEN SYSDATE - SL.SUB_STARTDATE < 0 THEN '강의 예정'
           WHEN SYSDATE - SL.SUB_ENDDATE <= 0 THEN '강의 중'
           WHEN SYSDATE - SL.SUB_ENDDATE > 0 THEN '강의 종료'
           ELSE '알 수 없음'
       END "강의진행여부"
FROM PROFESSOR P JOIN SUB_LIST SL
ON P.PRO_ID = SL.PRO_ID
    JOIN SUBJECT S
    ON SL.SUB_NO = S.SUB_NO
        JOIN BOOK B
        ON S.BOOK_NO = B.BOOK_NO
            JOIN CURRICULUM C
            ON SL.CUR_NO = C.CUR_NO
                JOIN ROOM R
                ON C.ROOM_NO = R.ROOM_NO;
                
SELECT *
FROM VIEW_PROFESSOR;


-- 2. 과정 정보 출력 VIEW 생성
--(과정명, 강의실, 과목명, 과목 기간(시작 연월일, 끝 연월일),교재 명, 교수자 명)
CREATE OR REPLACE VIEW VIEW_CUR_CHECK
AS
SELECT ROW_NUMBER() OVER(ORDER BY C.CUR_NAME DESC) "테스트"
    , C.CUR_NAME "과정명", C.ROOM_NO "강의실", S.SUB_NAME "과목명"
    , SL.SUB_STARTDATE "과목시작일", SL.SUB_ENDDATE "과목종료일"
    , B.BOOK_NAME "교재명", P.PRO_NAME "교수자명"
FROM CURRICULUM C JOIN SUB_LIST SL
ON C.CUR_NO = SL.CUR_NO
                JOIN SUBJECT S
                ON SL.SUB_NO = S.SUB_NO
                JOIN BOOK B
                ON S.BOOK_NO = B.BOOK_NO
                JOIN PROFESSOR P
                ON SL.PRO_ID = P.PRO_ID;
--==> View VIEW_CUR_CHECK이(가) 생성되었습니다.

SELECT *
FROM VIEW_CUR_CHECK;


-- 3. 과목 출력 VIEW
CREATE OR REPLACE VIEW VIEW_SUBJECT
AS
SELECT C.CUR_NAME "과정명", R.ROOM_NO "강의실명", S.SUB_NAME "과목명", B.BOOK_NAME "교재명"
        , L.SUB_STARTDATE "과목시작일", L.SUB_ENDDATE "과목종료일", P.PRO_NAME "교수자명"
FROM SUB_LIST L, CURRICULUM C, ROOM R, SUBJECT S, BOOK B, PROFESSOR P
WHERE  L.CUR_NO = C.CUR_NO
    AND C.ROOM_NO = R.ROOM_NO
    AND  L.SUB_NO = S.SUB_NO
    AND S.BOOK_NO = B.BOOK_NO
    AND L.PRO_ID = P.PRO_ID;
--==>> View VIEW_SUBJECT이(가) 생성되었습니다.

SELECT *
FROM VIEW_SUBJECT;


-- 4. 학생 정보 출력 VIEW
CREATE OR REPLACE VIEW VIEW_STUDENT
AS
SELECT ST. STU_NAME "학생 아이디",  C.CUR_NAME "과정명", SJ.SUB_NAME "수강과목"  
            , FN_SCORESUM(SL.LIST_NO, SC.ATTEND_SCORE, SC.PRAC_SCORE, SC.WRITE_SCORE) "수강과목총점"
FROM CURRICULUM C JOIN SUB_LIST SL  
        ON C.CUR_NO = SL.CUR_NO
            JOIN SUBJECT SJ
            ON SL.SUB_NO = SJ.SUB_NO
                JOIN SCORE SC
                ON SL.LIST_NO = SC.LIST_NO
                    JOIN REGISTRATION R
                    ON R.REG_NO =SC.REG_NO
                        JOIN STUDENT ST
                        ON ST.STU_ID = R.STU_ID;
                        
SELECT *
FROM VIEW_STUDENT;


-- 5. 성적 정보 출력 VIEW
--학생 이름, 과정명, 과목명, 교육 기간(시작 연월일, 끝 연월일), 교재 명,
--출결, 실기, 필기, 총점, 등수
CREATE OR REPLACE VIEW VIEW_SUNGJUK
AS
SELECT T.*, RANK() OVER(PARTITION BY T.과정명, T.과목시작일 ORDER BY T.총점 DESC) "등수"
FROM
(
    SELECT SL.PRO_ID "교수아이디", ST.STU_ID "학생아이디", ST.STU_NAME "학생이름", C.CUR_NAME "과정명", SJ.SUB_NAME "과목명", SL.SUB_STARTDATE "과목시작일"
        , SL.SUB_ENDDATE "과목종료일", B.BOOK_NAME "교재명", (SC.ATTEND_SCORE * SL.ATTEND_DIV)/100 "출결"
        , (SC.PRAC_SCORE * SL.PRAC_DIV)/100 "실기", (SC.WRITE_SCORE * SL.WRITE_DIV)/100 "필기"
        , FN_SCORESUM(SL.LIST_NO, SC.ATTEND_SCORE, SC.PRAC_SCORE, SC.WRITE_SCORE) "총점"
    FROM CURRICULUM C JOIN SUB_LIST SL  
            ON C.CUR_NO = SL.CUR_NO
                JOIN SUBJECT SJ
                ON SL.SUB_NO = SJ.SUB_NO
                    JOIN SCORE SC
                    ON SL.LIST_NO = SC.LIST_NO
                        JOIN REGISTRATION R
                        ON R.REG_NO =SC.REG_NO
                            JOIN STUDENT ST
                            ON ST.STU_ID = R.STU_ID
                                JOIN BOOK B
                                ON B.BOOK_NO = SJ.BOOK_NO
) T;

SELECT *
FROM VIEW_SUNGJUK;


-- 6.중도탈락 학생뷰
CREATE OR REPLACE VIEW VIEW_DROP
AS
SELECT T.교수아이디, T.학생아이디, T.수강신청번호, T.학생명, T.과정명, T.과목명, T.중도탈락일
FROM
(
    SELECT SL.PRO_ID "교수아이디",  ST.STU_ID "학생아이디", R.REG_NO "수강신청번호", ST.STU_NAME "학생명", C.CUR_NAME "과정명", SJ.SUB_NAME "과목명"
               , SL.SUB_STARTDATE "과목시작일", SL.SUB_ENDDATE "과목종료일",  D.STU_DROPDATE "중도탈락일" --조건에 사용할 것들
    FROM STU_DROP D, REGISTRATION R, STUDENT ST, CURRICULUM C, SUB_LIST SL, SUBJECT SJ
    WHERE D.REG_NO = R.REG_NO
        AND R.STU_ID = ST.STU_ID
        AND R.CUR_NO = C.CUR_NO 
        AND R.CUR_NO = SL.CUR_NO
        AND SL.SUB_NO = SJ.SUB_NO
) T
WHERE T.과목종료일 > T.중도탈락일;

SELECT *
FROM VIEW_DROP;


